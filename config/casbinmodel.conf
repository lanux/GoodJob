# 表示请求的格式, 也就是谁想操作什么
[request_definition]
r = sub, obj, act

# 表示权限的格式，权限的规则
# 一条权限策略包括：用户/角色, 租户, 资源, 操作
[policy_definition]
p = sub, obj, act

# 表示不同的 RBAC 体系：
# 一条组策略包括：用户, 角色, 租户
# _, _ 表示用户和角色
# _, _, _ 表示用户, 角色, 域(也就是租户)
[role_definition]
g = _, _

# 表示匹配之后的动作，组合了多个 Policy 之后的结果：allow/deny
[policy_effect]
e = some(where (p.eft == allow))

# 表示匹配的规则，通过运算得出bool值，判断 request_definition 是否满足 policy_definition
# keyMatch：能够支持使用*匹配进行匹配匹配
# keyMatch2：能够支持*号匹配和/:resource的模式
# regexMatch：能够支持正则匹配
# ipMatch：能够对ip格式进行匹配，"192.168.2.123" matches "192.168.2.0/24"
# g(r.sub, p.sub) 它表示请求中的sub应该在策略中定义了sub角色
[matchers]
m = r.sub in ('root', 'admin') || g(r.sub, p.sub) && (keyMatch(r.obj, p.obj) || regexMatch(r.obj, p.obj)) && (r.act == p.act || p.act == "*")
